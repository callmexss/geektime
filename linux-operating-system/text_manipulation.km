{"root":{"data":{"id":"bsugw8i1e1s0","created":1553305641203,"text":"Text Manipulation","hyperlink":"https://www.ibm.com/developerworks/aix/library/au-unixtext/index.html","hyperlinkTitle":"text manipulation"},"children":[{"data":{"id":"bsugxd8wzq80","created":1553305729900,"text":"cat","note":"The cat command is one of the most basic commands. It is used to **create, append, display, and concatenate** files.","expandState":"expand"},"children":[{"data":{"id":"bsugy6zud4w0","created":1553305794654,"text":"Example of cat to create a file","note":"```sh\n\n$ cat > grocery.list\napples\nbananas\nplums\n<ctrl-d>\n$\n\n```"},"children":[]},{"data":{"id":"bsugyy40c9k0","created":1553305853679,"text":"Example of cat to append a file","note":"Use the ‘>>’ operator to append standard input into an existing file.\n\n```sh\n\n$ cat >> grocery.list\ncarrots\n<ctrl-d>\n\n```"},"children":[]},{"data":{"id":"bsugzvjb6eo0","created":1553305926438,"text":"Example of cat without flags","note":"Examine the contents of the grocery.list file, using cat without flags. Notice how the file contents include input from the redirection and append operator examples.\n\n```sh\n\n$ cat grocery.list\napples\nbananas\nplums\ncarrots\n\n```"},"children":[]},{"data":{"id":"bsuh12jek5k0","created":1553306020046,"text":"Example of cat to count lines","note":"The cat command can be used to number the lines of a file.\n\n```sh\n\n$ cat -n grocery.list\n     1  apples\n     2  bananas\n     3  plums\n     4  carrots\n\n```"},"children":[]}]},{"data":{"id":"bsuh2em8f7k0","created":1553306124702,"text":"nl","note":"The nl filter reads lines from stdin or from specified files. Output is written to stdout, and may be redirected to a file or piped to another process. Behavior of nl is controlled through various command-line options.","expandState":"expand"},"children":[{"data":{"id":"bsuh30936i80","created":1553306171797,"text":"Example default usage of nl","note":"By default, nl counts lines similar to cat -n.\n\n```sh\n\n$nl grocery.list\n     1  apples\n     2  bananas\n     3  plums\n     4  carrots\n\n```"},"children":[]},{"data":{"id":"bsuh4wj3ag80","created":1553306320423,"text":"Example of nl to number lines conforming to a regex","note":"Use the -b flag to specify lines to be numbered. This flag takes as its argument a “type”. The type tells nl which lines need to be numbered.\n\n- use ‘a’ to number all lines \n- ‘t’ tells nl to not number empty lines or lines that are only whitespace \n- ‘n’ specifies no lines be numbered. \n- In the example a type of ‘p’ for pattern is shown. nl numbers the lines specified by a regular expression pattern.\n\nIn this case, lines starting with the letters ‘a’ or ‘b’.\n\n```sh\n\n$ nl -b p^[ba] grocery.list\n     1  apples\n     2  bananas\n       plums\n       carrots\n```"},"children":[]},{"data":{"id":"bsuh9d0qet40","created":1553306669775,"text":"Example of nl to specify a delimiter","note":"By default, nl separates the line number from the text using a tab. Use -s to specify a different delimiter, such as the ‘=’ sign.\n\n```sh\n\n$nl –s= grocery.list\n     1=apples\n     2=bananas\n     3=plums\n     4=carrots\n```"},"children":[]}]},{"data":{"id":"bsuhaed4m2w0","created":1553306751065,"text":"wc","note":"The wc (wordcount) command counts the number of lines, words (separated by whitespace), and characters in specified files, or from stdin."},"children":[{"data":{"id":"bsuhafirmlc0","created":1553306753583,"text":"Examples of wc usage","note":"```sh\n\n$wc grocery.list\n       4       4      29 grocery.list\n$wc -l grocery.list\n       4 grocery.list\n$wc -w grocery.list\n       4 grocery.list\n$wc -c grocery.list\n      29 grocery.list\n```"},"children":[]}]},{"data":{"id":"bswi6lrjphs0","created":1553512394741,"text":"grep","note":"The grep command searches specified files or stdin for patterns matching a given expression(s). Output from grep is controlled by various option flags."},"children":[{"data":{"id":"bswi771dn3k0","created":1553512441048,"text":"For demonstration","note":"a new file was created to use with the grocery.list.\n\n```sh\n\n$cat grocery.list2\nApple Sauce\nwild rice\nblack beans\nkidney beans\ndry apples\n```"},"children":[]},{"data":{"id":"bswi7ltr1600","created":1553512473238,"text":"Example of basic grep usage","note":"```sh\n\n$ grep apple grocery.list grocery.list2\ngrocery.list:apples\ngrocery.list2:dry apples\n```"},"children":[]},{"data":{"id":"bswi8sh0xsg0","created":1553512566071,"text":"Example of grep - counting number of matches in files","note":"To display the filename (if multiple files) with number of lines on which the pattern was found – in this case, count the number of lines the word ‘apple’ occurs in each file.\n\n```sh\n\n$ grep -c apple grocery.list grocery.list2\ngrocery.list:1\ngrocery.list2:1\n```"},"children":[]},{"data":{"id":"bswibm5sgv40","created":1553512787423,"text":"Example of grep - suppress filename in output","note":"When searching multiple files, using the -h option suppresses printing the filename as part of the output.\n\n```sh\n\n$ grep -h apple grocery.list grocery.list2\napples\ndry apples\n```"},"children":[]},{"data":{"id":"bswic6fuei80","created":1553512831567,"text":"Example of grep – case insensitive","note":"In many situations, a case-insensitive search is desired. The grep command has the -i option to ignore case-sensitivity when doing searches.\n\n```sh\n\n$ grep -i apple grocery.list grocery.list2\n \ngrocery.list:apples\ngrocery.list2:Apple Sauce\ngrocery.list2:dry apples\n```"},"children":[]},{"data":{"id":"bswid31s4oo0","created":1553512902550,"text":"Example of grep – filenames only","note":"Sometimes, only the filename needs to be printed, not the pattern-matching line. grep provides the -l option to only print filenames containing lines with a matching pattern.\n\n```sh\n\n$ grep -l carrot grocery.list grocery.list2\ngrocery.list\n```"},"children":[]},{"data":{"id":"bswidh0jt1s0","created":1553512932951,"text":"Example of grep – include line numbers","note":"Line numbers can be provided as part of the output. Use the -n option to include line numbers.\n\n```sh\n\n$ grep -n carrot grocery.list grocery.list2\ngrocery.list:4:carrots\n```"},"children":[]},{"data":{"id":"bswidrfdmlc0","created":1553512955615,"text":"Example of grep – inverted matching","note":"There are times when lines not matching the pattern are the desired output. In such situations use the -v option.\n\n```sh\n\n$ grep -v beans grocery.list2\nApple Sauce\nwild rice\ndry apples\n```"},"children":[]},{"data":{"id":"bswiebr6n400","created":1553512999865,"text":"Example of grep – word matching","note":"Sometimes the pattern desired forms a “word” surrounded by whitespace or other characters like a dash or parentheses. Most versions of grep provide a -w option to ease writing searches for these patterns.\n\n```sh\n\n$ grep -w apples grocery.list grocery.list2\ngrocery.list:apples\ngrocery.list2:dry apples\n```"},"children":[]}]}]},"template":"right","theme":"fresh-blue","version":"1.4.43"}